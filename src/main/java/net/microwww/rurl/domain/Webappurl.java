package net.microwww.rurl.domain;

import java.io.Serializable;
import java.util.*;
import javax.persistence.*;
import net.microwww.common.BeanContextFactory;
import net.microwww.rurl.repository.WebappurlRepository;

/**
 * Auto-generated by: org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@Entity
@Table(name = "webapp_url")
public class Webappurl implements Serializable {

    public static List<Webappurl> listWebappurl(Webapp app) {
        return getRepository().findByWebappId(app.getId());
    }

    public static List<Webappurl> listWebappurl() {
        return getRepository().findAll();
    }

    public static List<Webappurl> listWebappurl(Groups g, Webapp app) {
        return getRepository().findByGroupsIdWebappId(g.getId(), app.getId());
    }

    public static List<Webappurl> listWebappurl(Groups g) {
        return getRepository().findByGroupsId(g.getId());
    }

    public static List<Webappurl> listByPath(String path) {
        return getRepository().findByWebappPath(path);
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(columnDefinition = "INT UNSIGNED")
    private int id;

    @Basic
    @Column(columnDefinition = "INT")
    private int catalog;

    @Basic
    @Column(name = "create_time", columnDefinition = "TIMESTAMP", nullable = false)
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    private Date createTime = new Date();

    @Basic
    private String data;

    @Basic
    @Column(length = 1000)
    private String discrption;

    @Basic
    @Column(length = 45)
    private String name;

    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.REFRESH}, optional = true)
    @JoinColumn(name = "parent_id")
    private Webappurl parentUrl;

    @Basic
    @Column(columnDefinition = "INT")
    private int sort;

    @Basic
    @Column(columnDefinition = "INT UNSIGNED")
    private int type;

    @Basic
    @Column(name = "update_time")
    @Temporal(javax.persistence.TemporalType.DATE)
    private Date updateTime;

    @ManyToOne(cascade = {CascadeType.REFRESH}, optional = true)
    @JoinColumn(name = "webapp_id")
    private Webapp webapp;

    @Basic
    @Column(name = "webapp_path", nullable = false)
    private String webappPath;

    public Webappurl() {
    }

    public Webappurl(int id) {
        this.id = id;
    }

    public int getCatalog() {
        return catalog;
    }

    public void setCatalog(int catalog) {
        this.catalog = catalog;
    }

    public Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    public String getDiscrption() {
        return discrption;
    }

    public void setDiscrption(String discrption) {
        this.discrption = discrption;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getSort() {
        return sort;
    }

    public void setSort(int sort) {
        this.sort = sort;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public Date getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Date updateTime) {
        this.updateTime = updateTime;
    }

    public String getWebappPath() {
        return webappPath;
    }

    public void setWebappPath(String webappPath) {
        if (webappPath != null) {
            webappPath = webappPath.replaceAll("/+", "/");
        }
        this.webappPath = webappPath;
    }

    public Webapp getWebapp() {
        return webapp;
    }

    public void setWebapp(Webapp webapp) {
        this.webapp = webapp;
    }

    public Webappurl getParentUrl() {
        return parentUrl;
    }

    public void setParentUrl(Webappurl parentUrl) {
        this.parentUrl = parentUrl;
    }

    protected static WebappurlRepository getRepository() {
        return BeanContextFactory.get().getBean(WebappurlRepository.class);
    }

    public static Webappurl getById(int id) {
        return getRepository().getById(id);
    }
}
